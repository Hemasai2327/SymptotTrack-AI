{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hemas\\\\SymptoTrackAI\\\\symptotrack-frontend\\\\src\\\\components\\\\Dashboard.tsx\",\n  _s = $RefreshSig$();\n// src/components/Dashboard.tsx\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport HealthTrends from './HealthTrends'; // Ensure this path is correct // Import your visualization component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [healthInsights, setHealthInsights] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchHealthInsights = async () => {\n      try {\n        const response = await axios.get('http://localhost:5001/api/health-insights', {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}` // Assuming you're storing the JWT in localStorage\n          }\n        });\n        setHealthInsights(response.data);\n      } catch (err) {\n        setError('Failed to fetch health insights');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchHealthInsights();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Assuming healthInsights contains data for visualization\n  const data = healthInsights.map(insight => insight.value); // Adjust according to your data structure\n  const labels = healthInsights.map(insight => insight.date); // Adjust according to your data structure\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Health Insights\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HealthTrends, {\n      data: data,\n      labels: labels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"5SYJx/pzoJzSwPKBC/GrV+yBz5A=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","HealthTrends","jsxDEV","_jsxDEV","Dashboard","_s","healthInsights","setHealthInsights","loading","setLoading","error","setError","fetchHealthInsights","response","get","headers","localStorage","getItem","data","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","insight","value","labels","date","_c","$RefreshReg$"],"sources":["C:/Users/hemas/SymptoTrackAI/symptotrack-frontend/src/components/Dashboard.tsx"],"sourcesContent":["// src/components/Dashboard.tsx\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport HealthTrends from './HealthTrends'; // Ensure this path is correct // Import your visualization component\n\nconst Dashboard: React.FC = () => {\n    const [healthInsights, setHealthInsights] = useState<any[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchHealthInsights = async () => {\n            try {\n                const response = await axios.get('http://localhost:5001/api/health-insights', {\n                    headers: {\n                        'Authorization': `Bearer ${localStorage.getItem('token')}`, // Assuming you're storing the JWT in localStorage\n                    },\n                });\n                setHealthInsights(response.data);\n            } catch (err) {\n                setError('Failed to fetch health insights');\n                console.error(err);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchHealthInsights();\n    }, []);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>{error}</div>;\n    }\n\n    // Assuming healthInsights contains data for visualization\n    const data = healthInsights.map(insight => insight.value); // Adjust according to your data structure\n    const labels = healthInsights.map(insight => insight.date); // Adjust according to your data structure\n\n    return (\n        <div>\n            <h1>Your Health Insights</h1>\n            <HealthTrends data={data} labels={labels} />\n        </div>\n    );\n};\n\nexport default Dashboard;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAQ,EAAE,CAAC;EAC/D,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACZ,MAAMc,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,2CAA2C,EAAE;UAC1EC,OAAO,EAAE;YACL,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAE;UAChE;QACJ,CAAC,CAAC;QACFV,iBAAiB,CAACM,QAAQ,CAACK,IAAI,CAAC;MACpC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVR,QAAQ,CAAC,iCAAiC,CAAC;QAC3CS,OAAO,CAACV,KAAK,CAACS,GAAG,CAAC;MACtB,CAAC,SAAS;QACNV,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDG,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE;IACT,oBAAOL,OAAA;MAAAkB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,IAAIf,KAAK,EAAE;IACP,oBAAOP,OAAA;MAAAkB,QAAA,EAAMX;IAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC7B;;EAEA;EACA,MAAMP,IAAI,GAAGZ,cAAc,CAACoB,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3D,MAAMC,MAAM,GAAGvB,cAAc,CAACoB,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACG,IAAI,CAAC,CAAC,CAAC;;EAE5D,oBACI3B,OAAA;IAAAkB,QAAA,gBACIlB,OAAA;MAAAkB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BtB,OAAA,CAACF,YAAY;MAACiB,IAAI,EAAEA,IAAK;MAACW,MAAM,EAAEA;IAAO;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEd,CAAC;AAACpB,EAAA,CA3CID,SAAmB;AAAA2B,EAAA,GAAnB3B,SAAmB;AA6CzB,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}